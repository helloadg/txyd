package com.txyd.database.template;

public class DaoTemplate {
	private static final String daoTemplate ;
	static{
		String model="";
		model+="{package}\n";
		model+="\n";
		model+="import java.util.List;\n";
		model+="\n";
		model+="import org.apache.ibatis.session.SqlSessionFactory;\n";
		model+="import org.mybatis.spring.SqlSessionTemplate;\n";
		model+="\n";
		model+="/**\n";
		model+=" * MyBatis DAO通用操作类\n";
		model+=" * @author  {author}  \n";
		model+=" * @param <T>\n";
		model+=" * @param <ID>\n";
		model+=" */\n";
		model+="public interface BaseDao<T, ID>{\n";
		model+="	/**\n";
		model+="	 * @Description 取得SqlSessionTemplate模版\n";
		model+="	 * @author {author}\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public SqlSessionTemplate getSqlSessionTemplate();\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 取得SqlSessionFactory模版\n";
		model+="	   * @author {author}\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public SqlSessionFactory getSqlSessionFactory();\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 增加实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int insert(T object);\n";
		model+="	  /**\n";
		model+="	   * @Description 批量插入\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param domainList 需要更新的集合\n";
		model+="	   * @param count 表示多少笔数据提交一次\n";
		model+="	   */\n";
		model+="	  public int insertNotNull(T object);\n";
		model+="	  /**\n";
		model+="	   * @Description 批量插入\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param domainList 需要更新的集合\n";
		model+="	   * @param count 表示多少笔数据提交一次\n";
		model+="	   */\n";
		model+="	  public void insertBatch(Class<T> cls, List<T> domainList,Integer count);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 批量插入\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param domainList\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int insertBatch(Class<T> cls, List<T> domainList);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * \n";
		model+="	   * @Description 执行指定的sql语句（执行单条语句的批量）\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param sqlId 指定的sql语句\n";
		model+="	   * @param domainList\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int insertBatch(Class<T> cls, String sqlId, List<T> domainList);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * \n";
		model+="	   * @Description 分批量执行指定的sql语句(此方法和配置有关，勿用)\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param sqlId 指定的sql语句\n";
		model+="	   * @param domainList\n";
		model+="	   * @param count\n";
		model+="	   */\n";
		model+="	  public void insertBatch(Class<T> cls, String sqlId, List<T> domainList,Integer count);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按条件查询实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param obj\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public List<T> select(T obj);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按条件查询实体并分页 \n";
		model+="	   * @author {author}\n";
		model+="	   * @param obj\n";
		model+="	   * @param start\n";
		model+="	   * @param limit\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public List<T> select(T obj, int start, int limit);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按主键查询\n";
		model+="	   * @author {author}\n";
		model+="	   * @param id\n";
		model+="	   * @param cls\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public T getById(Class<T> cls,ID id);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按条件查询总记录数\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public Integer selectCount(T object);\n";
		model+="	  /**\n";
		model+="	   * @Description 按条件查询实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param obj\n";
		model+="	   * @param sqlId 指定的sql语句\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public List<T> select(T obj,String sqlId);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按条件查询实体并分页 \n";
		model+="	   * @author {author}\n";
		model+="	   * @param obj\n";
		model+="	   * @param sqlId 指定的sql语句\n";
		model+="	   * @param start\n";
		model+="	   * @param limit\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public List<T> select(T obj,String sqlId, int start, int limit);\n";
		model+="	  \n";
		model+="	  \n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按条件查询总记录数\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @param sqlId 指定的sql语句\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public Integer selectCount(T obj,String sqlId);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 更新实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int update(T object);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 更新实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int updateById(ID id);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * \n";
		model+="	   * @Description 执行指定的sql语句，更新数据\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @param sqlId 指定的sql语句\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int update(T object,String sqlId);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 批量更新\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param domainList 需要更新的集合\n";
		model+="	   * @param count 表示多少笔数据提交一次\n";
		model+="	   */\n";
		model+="	  public void updateBatch(Class<T> cls, List<T> domainList,Integer count); \n";
		model+="	  \n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * \n";
		model+="	   * @Description 执行指定的sql语句（执行单条语句的批量）\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param sqlId\n";
		model+="	   * @param domainList\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int updateBatch(Class<T> cls, String sqlId, List<T> domainList);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * \n";
		model+="	   * @Description 分批量执行指定的sql语句(此方法和配置有关，勿用)\n";
		model+="	   * @author {author}\n";
		model+="	   * @param cls\n";
		model+="	   * @param sqlId\n";
		model+="	   * @param domainList\n";
		model+="	   * @param count\n";
		model+="	   */\n";
		model+="	  public void updateBatch(Class<T> cls, String sqlId, List<T> domainList,Integer count);\n";
		model+="	  \n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 按主键删除实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param pk\n";
		model+="	   * @param cls\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int deleteById(Class<T> cls,ID id);\n";
		model+="	  \n";
		model+="	  /**\n";
		model+="	   * @Description 删除实体\n";
		model+="	   * @author {author}\n";
		model+="	   * @param object\n";
		model+="	   * @return\n";
		model+="	   */\n";
		model+="	  public int delete(T object);\n";
		model+="}\n";

		
		daoTemplate=model;
	}
	public static String getTemplate()
	{
		return daoTemplate;
	}
	public static void main(String[] strs)
	{
		System.out.println(getTemplate());
	}
}
