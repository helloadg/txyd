package com.txyd.database.template;

public class DaoImplTemplate {
	private static final String template ;
	static{
		String model="";
		model+="{package}\n";
		model+="\n";
		model+="import java.lang.reflect.Method;\n";
		model+="import java.util.List;\n";
		model+="\n";
		model+="import org.apache.ibatis.session.ExecutorType;\n";
		model+="import org.apache.ibatis.session.RowBounds;\n";
		model+="import org.apache.ibatis.session.SqlSession;\n";
		model+="import org.apache.ibatis.session.SqlSessionFactory;\n";
		model+="import org.apache.log4j.Logger;\n";
		model+="import org.mybatis.spring.SqlSessionTemplate;\n";
		model+="import org.springframework.beans.factory.annotation.Autowired;\n";
		model+="import org.springframework.util.StringUtils;\n";
		model+="{importBaseDao}\n";
		model+="\n";
		model+="public class BaseDaoImpl<T, ID> implements BaseDao<T, ID> {\n";
		model+="	\n";
		model+="	@SuppressWarnings(\"unused\")\n";
		model+="	private static Logger logger = Logger.getLogger(BaseDaoImpl.class);\n";
		model+="	\n";
		model+="	@Autowired\n";
		model+="	private SqlSessionFactory sqlSessionFactory;\n";
		model+="	\n";
		model+="	@Autowired\n";
		model+="	private SqlSessionTemplate sqlSessionTemplate;\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 插入\n";
		model+="	 */\n";
		model+="	public String INSERT = \".insert\";\n";
		model+="	/**\n";
		model+="	 * 插入\n";
		model+="	 */\n";
		model+="	public String INSERT_NOT_NULL = \".insertNotNull\";\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 批量插入\n";
		model+="	 */\n";
		model+="	public String INSERT_BATCH = \".insertBatch\";\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 更新\n";
		model+="	 */\n";
		model+="	public String UPDATE_BY_ID = \".updateById\";\n";
		model+="	/**\n";
		model+="	 * 更新\n";
		model+="	 */\n";
		model+="	public String UPDATE = \".update\";\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 根据ID 删除\n";
		model+="	 */\n";
		model+="	public String DELETE= \".delete\";\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 根据ID 删除\n";
		model+="	 */\n";
		model+="	public String DELETE_BY_ID = \".deleteById\";\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 根据ID 查询\n";
		model+="	 */\n";
		model+="	public String SELECT = \".select\";\n";
		model+="	/**\n";
		model+="	 * 根据ID 查询\n";
		model+="	 */\n";
		model+="	public String GET_BY_ID = \".getById\";\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 根据条件 分页查询\n";
		model+="	 */\n";
		model+="	public String SELECT_COUNT = \".selectCount\";\n";
		model+="	/**\n";
		model+="	 * 根据条件 分页查询\n";
		model+="	 */\n";
		model+="	public String SELECT_PAGE = \".select_page\";\n";
		model+="	\n";
		model+="	private Object target;\n";
		model+="	\n";
		model+="	private Method invokingMethod;\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int insert(T object) {\n";
		model+="		int count = sqlSessionTemplate.insert(object.getClass().getName()+ INSERT, object);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"保存失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int insertNotNull(T object) {\n";
		model+="		int count = sqlSessionTemplate.insert(object.getClass().getName()+ INSERT_NOT_NULL, object);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"保存失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@SuppressWarnings(\"unchecked\")\n";
		model+="	@Override\n";
		model+="	public List<T> select(T obj) {\n";
		model+="		return (List<T>) sqlSessionTemplate.selectList(obj.getClass().getName()\n";
		model+="				+ SELECT, obj);\n";
		model+="	}\n";
		model+="	\n";
		model+="	@SuppressWarnings(\"unchecked\")\n";
		model+="	@Override\n";
		model+="	public List<T> select(T obj, int offset, int limit) {\n";
		model+="		RowBounds rb = new RowBounds(offset, limit);\n";
		model+="		return (List<T>) sqlSessionTemplate.selectList(obj.getClass().getName()\n";
		model+="				+ SELECT, obj, rb);\n";
		model+="	}\n";
		model+="	\n";
		model+="	@SuppressWarnings(\"unchecked\")\n";
		model+="	@Override\n";
		model+="	public T getById(Class<T> cls,ID id) {\n";
		model+="		return (T) sqlSessionTemplate.selectOne(cls.getName() + GET_BY_ID, id);\n";
		model+="	\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int update(T object) {\n";
		model+="		int count = sqlSessionTemplate.update(object.getClass().getName()+ UPDATE, object);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"修改失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int updateById(ID id) {\n";
		model+="		int count = sqlSessionTemplate.update(object.getClass().getName()+ UPDATE_BY_ID, id);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"修改失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int deleteById(Class<T> cls,ID id) {\n";
		model+="		return sqlSessionTemplate.delete(cls.getName() + DELETE_BY_ID, id);\n";
		model+="	\n";
		model+="	}\n";
		model+="	@Override\n";
		model+="	public int delete(T object) {\n";
		model+="		return sqlSessionTemplate.delete(object.getClass().getName() + DELETE, object);\n";
		model+="		\n";
		model+="	}\n";
		model+="	@Override\n";
		model+="	public Integer selectCount(T object) {\n";
		model+="		Object obj = sqlSessionTemplate.selectOne(object.getClass().getName()+ SELECT_COUNT, object);\n";
		model+="		if (obj != null) {\n";
		model+="			return Integer.parseInt(obj.toString());\n";
		model+="		}\n";
		model+="		return 0;\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int insertBatch(Class<T> cls, List<T> domainList) {\n";
		model+="		int count = sqlSessionTemplate.insert(cls.getName() + INSERT_BATCH,\n";
		model+="				domainList);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"插入失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public void insertBatch(Class<T> cls, List<T> domainList, Integer count) {\n";
		model+="		SqlSession sqlSession = null;\n";
		model+="		if (domainList == null) {\n";
		model+="			return;\n";
		model+="		}\n";
		model+="	\n";
		model+="		sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH, false);\n";
		model+="	\n";
		model+="		int num = 0;\n";
		model+="		for (T t : domainList) {\n";
		model+="	\n";
		model+="			sqlSession.insert(cls.getName() + INSERT, t);\n";
		model+="			num++;\n";
		model+="			if (count == num) {\n";
		model+="				sqlSession.commit();\n";
		model+="				num = 0;\n";
		model+="			}\n";
		model+="		}\n";
		model+="	\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public void updateBatch(Class<T> cls, List<T> domainList, Integer count) {\n";
		model+="		SqlSession sqlSession = null;\n";
		model+="	\n";
		model+="		if (domainList == null) {\n";
		model+="			return;\n";
		model+="		}\n";
		model+="		sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH, false);\n";
		model+="	\n";
		model+="		int num = 0;\n";
		model+="		for (T t : domainList) {\n";
		model+="			sqlSession.update(cls.getName() + UPDATE, t);\n";
		model+="			num++;\n";
		model+="			if (count == num) {\n";
		model+="				sqlSession.commit();\n";
		model+="				num = 0;\n";
		model+="			}\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 获得当前方法对应的语句映射Id,如果提供的id不为空， 则直接返回，否则则按照默认规则生成的id.\n";
		model+="	 * @param statement\n";
		model+="	 * @return\n";
		model+="	 */\n";
		model+="	@SuppressWarnings(\"unused\")\n";
		model+="	\n";
		model+="	private String getStatment(String statement) {\n";
		model+="		if (StringUtils.isEmpty(statement)) {\n";
		model+="			return this.getStatement();\n";
		model+="		}\n";
		model+="		return statement;\n";
		model+="	}\n";
		model+="	\n";
		model+="	/**\n";
		model+="	 * 获得调用的方法映射的sql语句的statement id。 规约是映射文件的namespace就是对应的dao的类名（类的全名，如String，\n";
		model+="	 * 则类名是java.lang.String），映射的statement id是方法名。\n";
		model+="	 * @return\n";
		model+="	 */\n";
		model+="	public String getStatement() {\n";
		model+="		if (target == null || invokingMethod == null)\n";
		model+="			return null;\n";
		model+="		Class<?> c = target.getClass();\n";
		model+="		Method[] methods = c.getMethods();\n";
		model+="		String namespace = target.getClass().getName();\n";
		model+="		StringBuffer bufId = new StringBuffer(invokingMethod.getName());\n";
		model+="		for (Method m : methods) {\n";
		model+="			if (m.getName().equals(invokingMethod.getName())\n";
		model+="					&& !m.equals(invokingMethod)) {\n";
		model+="				Class<?>[] s = m.getParameterTypes();\n";
		model+="				if (s != null && s.length > 0) {\n";
		model+="					for (Class<?> z : s) {\n";
		model+="						bufId.append(\"_\").append(z.getSimpleName());\n";
		model+="					}\n";
		model+="				}\n";
		model+="			}\n";
		model+="		}\n";
		model+="		return namespace + \".\" + bufId.toString();\n";
		model+="	}\n";
		model+="	\n";
		model+="	public Object getTarget() {\n";
		model+="		return target;\n";
		model+="	}\n";
		model+="	\n";
		model+="	public void setTarget(Object target) {\n";
		model+="		this.target = target;\n";
		model+="	}\n";
		model+="	\n";
		model+="	public Method getInvokingMethod() {\n";
		model+="		return invokingMethod;\n";
		model+="	}\n";
		model+="	\n";
		model+="	public void setInvokingMethod(Method invokingMethod) {\n";
		model+="		this.invokingMethod = invokingMethod;\n";
		model+="	}\n";
		model+="	\n";
		model+="	\n";
		model+="	\n";
		model+="	public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {\n";
		model+="		this.sqlSessionFactory = sqlSessionFactory;\n";
		model+="	}\n";
		model+="	\n";
		model+="	public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) {\n";
		model+="		this.sqlSessionTemplate = sqlSessionTemplate;\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int update(T object, String sqlId) {\n";
		model+="		int count = sqlSessionTemplate.update(object.getClass().getName() + \".\"\n";
		model+="				+ sqlId, object);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"修改失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int insertBatch(Class<T> cls, String sqlId, List<T> domainList) {\n";
		model+="		int count = sqlSessionTemplate.insert(cls.getName() + \".\" + sqlId,\n";
		model+="				domainList);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"插入失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public int updateBatch(Class<T> cls, String sqlId, List<T> domainList) {\n";
		model+="		int count = sqlSessionTemplate.update(cls.getName() + \".\" + sqlId,\n";
		model+="				domainList);\n";
		model+="		if (count == 0) {\n";
		model+="			throw new RuntimeException(\"更新失败\");\n";
		model+="		} else {\n";
		model+="			return count;\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public void insertBatch(Class<T> cls, String sqlId, List<T> domainList,\n";
		model+="			Integer count) {\n";
		model+="		SqlSession sqlSession = null;\n";
		model+="		if (domainList == null) {\n";
		model+="			return;\n";
		model+="		}\n";
		model+="	\n";
		model+="		sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH, false);\n";
		model+="	\n";
		model+="		int num = 0;\n";
		model+="		for (T t : domainList) {\n";
		model+="	\n";
		model+="			sqlSession.insert(cls.getName() + \".\" + sqlId, t);\n";
		model+="			num++;\n";
		model+="			if (count == num) {\n";
		model+="				sqlSession.commit();\n";
		model+="				num = 0;\n";
		model+="			}\n";
		model+="		}\n";
		model+="	\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public void updateBatch(Class<T> cls, String sqlId, List<T> domainList,\n";
		model+="			Integer count) {\n";
		model+="		SqlSession sqlSession = null;\n";
		model+="	\n";
		model+="		if (domainList == null) {\n";
		model+="			return;\n";
		model+="		}\n";
		model+="		sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH, false);\n";
		model+="	\n";
		model+="		int num = 0;\n";
		model+="		for (T t : domainList) {\n";
		model+="			sqlSession.update(cls.getName() + UPDATE, t);\n";
		model+="			num++;\n";
		model+="			if (count == num) {\n";
		model+="				sqlSession.commit();\n";
		model+="				num = 0;\n";
		model+="			}\n";
		model+="		}\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public SqlSessionTemplate getSqlSessionTemplate() {\n";
		model+="		return this.sqlSessionTemplate;\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public SqlSessionFactory getSqlSessionFactory() {\n";
		model+="		return this.sqlSessionFactory;\n";
		model+="	}\n";
		model+="	\n";
		model+="	@SuppressWarnings(\"unchecked\")\n";
		model+="	@Override\n";
		model+="	public List<T> select(T obj, String sqlId) {\n";
		model+="		return (List<T>) sqlSessionTemplate.selectList(obj.getClass().getName()+\".\"+sqlId, obj);\n";
		model+="	}\n";
		model+="	\n";
		model+="	@SuppressWarnings(\"unchecked\")\n";
		model+="	@Override\n";
		model+="	public List<T> select(T obj, String sqlId, int start, int limit) {\n";
		model+="		RowBounds rb = new RowBounds(start, limit);\n";
		model+="		return (List<T>) sqlSessionTemplate.selectList(obj.getClass().getName()+\".\"+sqlId, obj, rb);\n";
		model+="	}\n";
		model+="	\n";
		model+="	@Override\n";
		model+="	public Integer selectCount(T object, String sqlId) {\n";
		model+="		Object obj = sqlSessionTemplate.selectOne(object.getClass().getName()+\".\"+sqlId, object);\n";
		model+="		if (obj != null) {\n";
		model+="			return Integer.parseInt(obj.toString());\n";
		model+="		}\n";
		model+="		return 0;\n";
		model+="	}\n";
		model+="}\n";



		
		template=model;
	}
	public static String getTemplate()
	{
		return template;
	}
	public static void main(String[] strs)
	{
		System.out.println(getTemplate());
	}
}
