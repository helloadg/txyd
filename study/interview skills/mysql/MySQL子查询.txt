列子查询:
    SELECT * FROM article WHERE uid IN(SELECT uid FROM user WHERE status=1)
    列子查询中使用 IN、ANY、SOME 和 ALL 操作符
    由于列子查询返回的结果集是 N 行一列，因此不能直接使用 = > < >= <= <> 这些比较标量结果的操作符。在列子查询中可以使用 IN、ANY、SOME 和 ALL 操作符：
    IN：在指定项内，同 IN(项1,项2,…)。
    ANY：与比较操作符联合使用，表示与子查询返回的任何值比较为 TRUE ，则返回 TRUE 。
        SELECT s1 FROM table1 WHERE s1 > ANY (SELECT s2 FROM table2)
        IN 是 = ANY 的别名，二者相同，但 NOT IN 的别名却不是 <> ANY 而是 <> SOME。
        特殊情况
        如果 table2 为空表，则 ANY 后的结果为 FALSE；
        如果子查询返回如 (NULL,NULL,NULL) 列为空的结果，则 ANY 后的结果为 UNKNOWN 。
    SOME：ANY 的别名，较少使用。
    ALL：与比较操作符联合使用，表示与子查询返回的所有值比较都为 TRUE ，则返回 TRUE 。
        SELECT s1 FROM table1 WHERE s1 > ALL (SELECT s2 FROM table2)
        NOT IN 是 <> ALL 的别名
        特殊情况
        如果 table2 为空表，则 ALL 后的结果为 TRUE；
        如果子查询返回如 (0,NULL,1) 这种尽管 s1 比返回结果都大，但有空行的结果，则 ALL 后的结果为 UNKNOWN 。
        注意：对于 table2 空表的情况，下面的语句均返回 NULL：
        SELECT s1 FROM table1 WHERE s1 >ALL (SELECT s2 FROM table2)
        SELECT s1 FROM table1 WHERE s1 > ALL (SELECT MAX(s1) FROM table2)

    

标量子查询:
    SELECT * FROM article WHERE uid = (SELECT uid FROM user WHERE status=1 ORDER BY uid DESC LIMIT 1)
行子查询:
    SELECT * FROM table1 WHERE (1,2) = (SELECT column1, column2 FROM table2)
表子查询:
    SELECT * FROM article WHERE (title,content,uid) IN (SELECT title,content,uid FROM blog)
子查询 EXISTS 和 NOT EXISTS:
    SELECT ... FROM table WHERE  EXISTS (subquery)
    提示
    EXISTS (subquery) 只返回 TRUE 或 FALSE，因此子查询中的 SELECT * 也可以是 SELECT 1 或其他，官方说法是实际执行时会忽略 SELECT 清单，因此没有区别。
    EXISTS 子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。
    EXISTS 子查询往往也可以用条件表达式、其他子查询或者 JOIN 来替代，何种最优需要具体问题具体分析。
关联子查询:
    SELECT * FROM article WHERE uid IN(SELECT uid FROM user WHERE article.uid = user.uid)
    关联子查询中，是无法单独执行子查询语句的。其实际流程大致为：
        先做外部主查询；
        将主查询的值传入子查询并执行；
        子查询再将查询结果返回主查询，主查询根据返回结果完成最终的查询。
        这个执行流程类似于 EXISTS 子查询，实际上某些情况下 MySQL 就是将关联子查询重写为 EXISTS 子查询来执行的。
    MySQL 关联子查询效率
    很明显，一般情况下关联子查询的效率是比较低下的，实际上本例中的关联子查询例子也仅是为了演示关联子查询的原理及用法。如果可以的话，关联子查询尽量使用 JOIN 或其他查询来代替。如本例中，使用 INNER JOIN 来替换的 SQL 为：
    SELECT article.* FROM article INNER JOIN user ON article.uid = user.uid
    注意：此处只是为了演示用 INNER JOIN 替换关联子查询的样例，并非表名这种处理是最优处理。
FROM 子查询:
    MySQL FROM 子查询是指 FROM 的子句作为子查询语句，主查询再到子查询结果中获取需要的数据。FROM 子查询语法如下：
    SELECT ... FROM (subquery) AS name ...
    子查询会生成一个临时表，由于 FROM 子句中的每个表必须有一个名称，因此 AS name 是必须的。FROM 子查询也称为衍生数据表子查询。
JOIN 查询：
    SQL（MySQL） JOIN 用于根据两个或多个表中的字段之间的关系，从这些表中得到数据。
    JOIN 通常与 ON 关键字搭配使用，基本语法如下：
    ... FROM table1 INNER|LEFT|RIGHT JOIN table2 ON conditiona
    table1 通常称为左表，table2 称为右表。ON 关键字用于设定匹配条件，用于限定在结果集合中想要哪些行。如果需要指定其他条件，后面可以加上 WHERE 条件 或者 LIMIT 以限制记录返回数目等。
    MySQL JOIN 分类
    JOIN 按照功能大致分为如下三类：
    INNER JOIN（内连接）：取得两个表中存在连接匹配关系的记录。
    LEFT JOIN（左连接）：取得左表（table1）完全记录，即使右表（table2）并无对应匹配记录（如果没有匹配,右侧将包含null）。
    RIGHT JOIN（右连接）：与 LEFT JOIN 相反，取得右表（table2）完全记录，即是左表（table1）并无匹配对应记录（如果没有匹配,左侧将包含null）。
    关于 MySQL FULL JOIN 全连接
    MySQL 没有提供 SQL 标准中的 FULL JOIN（全连接）：两个表记录都取出，而不管彼此是否有对应记录。要解决此问题，可以使用 UNION 关键字来合并 LEFT JOIN 与 RIGHT JOIN，达到模拟 FULL JOIN 的目的。
    cross join：交叉连接，得到的结果是两个表的乘积，即笛卡尔积：在 MySQL 中（仅限于 MySQL） CROSS JOIN 与 INNER JOIN 的表现是一样的，在不指定 ON 条件得到的结果都是笛卡尔积，反之取得两个表完全匹配的结果。 INNER JOIN 与 CROSS JOIN 可以省略 INNER 或 CROSS 关键字

    注意：on与 where的执行顺序，ON 子句和 WHERE 子句的不同
        ON 条件（“A LEFT JOIN B ON 条件表达式”中的ON）用来决定如何从 B 表中检索数据行。如果 B 表中没有任何一行数据匹配 ON 的条件,将会额外生成一行所有列为 NULL 的数据,在匹配阶段 WHERE 子句的条件都不会被使用。仅在匹配阶段完成以后，WHERE 子句条件才会被使用。它将从匹配阶段产生的数据中检索过滤。
        所以我们要注意：在使用Left (right) join的时候，一定要在先给出尽可能多的匹配满足条件，减少Where的执行。

mysql独有的join语句 ：
    STRAIGHT_JOIN ：
        STRAIGHT_JOIN 是 MySQL 对标准 SQL 的扩展，用于在多表查询时指定表载入的顺序。在 JOIN 表连接中，同样可以指定表载入的顺序：
        select .. FROM table1 STRAIGHT_JOIN table2 ON condition 
        STRAIGHT_JOIN 实际上与内连接 INNER JOIN 表现完全一致，不同的是使用了 STRAIGHT_JOIN 后，table1 会先于 table2 载入
    NATURAL JOIN：NATURAL JOIN 也叫自然连接，实际是属于 JOIN 的一种，NATURAL JOIN 默认是同名字段完全匹配的 INNER JOIN
        select .. FROM table1 NATURAL  JOIN table2 ...
