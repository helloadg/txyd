MySQL事务隔离级别详解:
    SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。

Read Uncommitted（读取未提交内容）：RU级别
    在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。
    通俗解释：引入mysql原始数据区以及快照的概念，所有的事务操作的都是同一个快照(快照中包含索引自身的快照)，commit后再更新到原始数据中；

Read Committed（读取提交内容）：RC级别
    这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。
    通俗解释：引入mysql原始数据区以及快照的概念，每个事务操作的是自身对应一个专属快照(快照中包含索引自身的快照)，commit后再同时更新到原始数据中和其他事务的快照中；

Repeatable Read（可重读）：RR级别
    这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。在事务存在期间，不允许其他事务执行会影响这个事务正在访问的任何行的插入、更新或删除操作。为了确保这种行为不会发生，锁定该事务所引用的每一行-- 而不是仅锁定被实际检索或修改的那些行。因此，如果一个事务扫描了1000行，但只检索10行，那么它所扫描的1000行(而不仅是被检索的10行)都会被锁定。
    通俗解释：引入mysql原始数据区以及快照的概念，每个事务操作的都是自身对应一个专属快照(快照中包含索引自身的快照)，但是每次都会争抢原始数据的锁，扫描一行锁定一行，如果扫描了表中全部数据，则锁定整张表，如果扫描了某个索引中的全部值则锁定该索引以及原始数据对应的表(是否锁定索引，待查！)；

Serializable（可串行化） 
    这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。
这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：
脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。
不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。
幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。


-- 查看那些表锁到了
show OPEN TABLES where In_use > 0;
-- 查看进程号
show full processlist;
-- 删除进程
 kill 1085850；

show engine innodb status;
show global variables like '%iso%';
select @@tx_isolation;
select @@global.tx_isolation; -- REPEATABLE-READ  -- READ-COMMITTED
set global tx_isolation='REPEATABLE-READ'


show OPEN TABLES where In_use > 0;
show status like '%lock%';
show full processlist;


    begin;

    SELECT * FROM `test_isolation` where sid not in(1,2) for update ;
    SELECT * FROM `test_isolation` ignore index(i_sid) where sid =1 for update;

    insert into test_isolation (sid,`name`,is_deleted) VALUES ('1','name1_insert','0');


    SELECT * FROM `test_isolation` r force index( i_sid) where r.sid =1  for update;
    SELECT SQL_CACHE * FROM `test_isolation` r force index( i_sid) where r.sid =1  for update;
    SELECT SQL_NO_CACHE * FROM `test_isolation` r force index( i_sid) where r.sid =1  for update;
    update `test_isolation` r set `name` = 'name1_update'  where r.sid =1;
    insert into test_isolation (sid,`name`,is_deleted) value('3','name1_insert','0');

update `test_isolation` r set `name` = 'name1_update'  where r.id =1;

    lock tables `test_isolation` read;
    unlock tables;

    commit;
    ROLLBACK;