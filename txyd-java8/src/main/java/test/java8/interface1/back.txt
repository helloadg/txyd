慎用Java 8的默认方法
什么是default方法？
Java 8发布以后，可以给接口添加新方法，但是，接口仍然可以和它的实现类保持兼容。这非常重要，因为你开发的类库可能正在被多个开发者广泛的使用着。而Java 8之前，在类库中发布了一个接口以后，如果在接口中添加一个新方法，那些实现了这个接口的应用使用新版本的接口就会有崩溃的危险。
有了Java 8，是不是就没有这种危险了？答案是否定的。
给接口添加default方法可能会让某些实现类不可用。
首先，让我们看下default方法的细节。
在Java 8中，接口中的方法可以被实现（Java8中的static的方法也可以在接口中实现，但这是另一个话题）。接口中被实现的方法叫做default方法，用关键字default作为修饰符来标识。当一个类实现一个接口的时候，它可以实现已经在接口中被实现过的方法，但这不是必须的。这个类会继承default方法。这就是为什么当接口发生改变的时候，实现类不需要做改动的原因。
多继承的时候呢？
当一个类实现了多于一个（比如两个）接口，而这些接口又有同样的default方法的时候，事情就变得很复杂了。类继承的是哪一个default方法呢？哪一个也不是！在这种情况下，类要自己（直接或者是继承树上更上层的类）来实现default方法（才可以）。
当一个接口实现了default方法，另一个接口把default方法声明成了abstract的时候，同样如此。Java 8试图避免不明确的东西，保持严谨。如果一个方法在多个接口中都有声明，那么，任何一个default实现都不会被继承，你将会得到一个编译时错误。
但是，如果你已经把你的类编译过了，那就不会出现编译时错误了。在这一点上，Java 8是不一致的。它有它自己的原因，有于各种原因，在这里我不想详细的说明或者是深入的讨论（因为：版本已经发布了，讨论时间太长，这个平台从来没有这样的讨论）。
1.假如你有两个接口，一个实现类。
2.其中一个接口实现了一个default方法m()。
3.把接口和实现类一块编译。
4.修改那个没有包含m()方法的接口，声明m()方法为abstract。
5.单独重新编译修改过的接口。
6.运行实现类。
【图：继承1.png】
上面的情况下类可以正常运行。但是，不能用修改过的接口重新编译，但是用老的接口编译仍然可以运行。接下来
1.修改那个含有abstract方法m()的接口，创建一个default实现。
2.编译修改后的接口
3.运行类：失败。
当两个接口给同一个方法都提供了default实现的时候，这个方法是无法被调用的，除非实现类也实现了这个default方法（要么是直接实现，要么是继承树上更上层的类做实现）
【图：继承2.png】
但是，这个类是兼容的。它可以在使用新接口的情况下被载入，甚至可以执行，只要它没有调用在两个接口中都有default实现的方法。
实例代码：

结论
当你把给接口添加了default实现的类库移植到Java 8环境下的时候，一般不会有问题。至少Java8类库开发者给集合类添加default方法的时候就是这么想的。使用你类库的应用程序仍然依赖没有default方法的Java7的类库。当使用和修改多个不同的类库的时候，有很小的几率会发生冲突。如何才能避免呢？
像以前那样设计你的类库。可能依赖default方法的时候不要掉以轻心。万不得已不要使用。明智的选择方法名，避免和其它接口产生冲突。我们将会学习到Java编程中如何使用这个特性做开发。